import React, { useState, useEffect } from 'react';
import { Users, Zap, Trophy, Target, Heart, DollarSign, Calendar, Star, Shield, Sword, Home, User, MessageCircle, Settings } from 'lucide-react';

// Core data structures
const ARCHETYPES = {
  DETERMINED: { name: 'The Determined', color: 'bg-red-500', icon: Shield },
  SOCIAL_FIGHTER: { name: 'The Social Fighter', color: 'bg-blue-500', icon: Users },
  HEALTH_WARRIOR: { name: 'The Health Warrior', color: 'bg-green-500', icon: Heart },
  MONEY_SAVER: { name: 'The Money Saver', color: 'bg-yellow-500', icon: DollarSign }
};

const RARITIES = {
  COMMON: { name: 'Common', color: 'border-gray-400', glow: '', days: 0 },
  UNCOMMON: { name: 'Uncommon', color: 'border-gray-300', glow: 'shadow-lg', days: 7 },
  RARE: { name: 'Rare', color: 'border-yellow-400', glow: 'shadow-yellow-400/50 shadow-lg', days: 14 },
  EPIC: { name: 'Epic', color: 'border-purple-400', glow: 'shadow-purple-400/50 shadow-xl', days: 30 },
  LEGENDARY: { name: 'Legendary', color: 'border-orange-400', glow: 'shadow-orange-400/50 shadow-2xl animate-pulse', days: 90 }
};

const ACHIEVEMENTS = {
  WEEK_WARRIOR: { name: 'Week Warrior', icon: Calendar, description: '7 days clean' },
  MONTH_MASTER: { name: 'Month Master', icon: Trophy, description: '30 days clean' },
  LEGEND: { name: 'Legend', icon: Star, description: '90 days clean' }
};

const calculateRarity = (streakDays) => {
  if (streakDays >= 90) return 'LEGENDARY';
  if (streakDays >= 30) return 'EPIC';
  if (streakDays >= 14) return 'RARE';
  if (streakDays >= 7) return 'UNCOMMON';
  return 'COMMON';
};

// StatBar Component
const StatBar = ({ label, value, max, color }) => (
  <div className="mb-2">
    <div className="flex justify-between text-white text-xs mb-1">
      <span>{label}</span>
      <span>{value}/{max}</span>
    </div>
    <div className="w-full bg-gray-700 rounded-full h-2">
      <div 
        className={`${color} h-2 rounded-full transition-all duration-500`} 
        style={{ width: `${(value / max) * 100}%` }}
      />
    </div>
  </div>
);

// Trading Card Component
const TradingCard = ({ user, isNemesis = false, showComparison = false, nemesisUser = null }) => {
  if (!user || !user.archetype || !user.stats) {
    return (
      <div className="w-80 h-[480px] bg-slate-800 rounded-xl border-2 border-gray-400 p-4 text-white text-center mx-auto flex items-center justify-center">
        <div className="animate-pulse">Loading Card...</div>
      </div>
    );
  }

  const archetype = ARCHETYPES[user.archetype];
  const rarity = RARITIES[calculateRarity(user.stats.streakDays)];
  const ArchetypeIcon = archetype.icon;
  
  let battleStatusElement = null;
  if (showComparison && nemesisUser) {
    const isWinning = user.stats.streakDays > nemesisUser.stats.streakDays;
    const isTied = user.stats.streakDays === nemesisUser.stats.streakDays;
    
    let statusText, statusColor;
    if (isWinning) {
      statusText = 'WINNING';
      statusColor = 'bg-green-600';
    } else if (isTied) {
      statusText = 'TIED';
      statusColor = 'bg-yellow-600';
    } else {
      statusText = 'LOSING';
      statusColor = 'bg-red-600';
    }
    
    battleStatusElement = (
      <div className={`absolute -bottom-1 left-1/2 transform -translate-x-1/2 ${statusColor} text-white px-2 py-1 rounded-full text-xs font-bold z-10 animate-pulse`}>
        {statusText}
      </div>
    );
  }
  
  return (
    <div 
      className={`relative w-80 h-[480px] rounded-xl ${rarity.color} border-4 ${rarity.glow} bg-gradient-to-br from-slate-800 to-slate-900 p-4 transform transition-all duration-300 hover:scale-105 mx-auto overflow-hidden`}
    >
      <div className={`absolute top-2 right-2 px-2 py-1 rounded text-xs font-bold ${archetype.color} text-white z-10`}>
        {rarity.name}
      </div>
      
      <div className="text-center mb-3">
        <h3 className="text-white font-bold text-lg leading-tight break-words px-1">{user.heroName}</h3>
        <p className="text-gray-300 text-base">{archetype.name}</p>
      </div>
      
      <div className="w-20 h-20 mx-auto mb-4 rounded-full overflow-hidden bg-slate-700 flex items-center justify-center ring-2 ring-blue-400/50">
        {user.avatar ? (
          <img src={user.avatar} alt="Avatar" className="w-full h-full object-cover" />
        ) : (
          <div className={`w-full h-full ${archetype.color} flex items-center justify-center`}>
            <ArchetypeIcon className="w-10 h-10 text-white" />
          </div>
        )}
      </div>
      
      <div className="space-y-2 mb-4">
        <StatBar label="Addiction" value={user.stats.addictionLevel} max={10} color="bg-red-500" />
        <StatBar label="Willpower" value={Math.round(user.stats.willpower)} max={10} color="bg-blue-500" />
        <StatBar label="Motivation" value={user.stats.motivation} max={10} color="bg-green-500" />
      </div>
      
      <div className="bg-black/30 rounded-lg p-3 space-y-2 mb-3 backdrop-blur-sm">
        <div className="flex justify-between text-white text-sm">
          <span className="text-gray-300">Streak:</span>
          <span className="font-bold text-green-400 flex items-center gap-1">
            {user.stats.streakDays} days
            {user.stats.streakDays > 0 && <span className="text-xs">🔥</span>}
          </span>
        </div>
        <div className="flex justify-between text-white text-sm">
          <span className="text-gray-300">Saved:</span>
          <span className="font-bold text-yellow-400">£{(user.stats.moneySaved || 0).toFixed(0)}</span>
        </div>
        <div className="flex justify-between text-white text-sm">
          <span className="text-gray-300">XP:</span>
          <span className="font-bold text-purple-400">{user.stats.experiencePoints || 0}</span>
        </div>
      </div>
      
      {user.achievements && user.achievements.length > 0 && (
        <div className="flex flex-wrap gap-1 justify-center">
          {user.achievements.slice(0, 4).map((achievement, index) => {
            const AchIcon = ACHIEVEMENTS[achievement]?.icon || Star;
            return (
              <div key={index} className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center shadow-lg" title={ACHIEVEMENTS[achievement]?.description}>
                <AchIcon className="w-3 h-3 text-white" />
              </div>
            );
          })}
          {user.achievements.length > 4 && (
            <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center text-white text-xs font-bold">
              +{user.achievements.length - 4}
            </div>
          )}
        </div>
      )}
      
      {battleStatusElement}
    </div>
  );
};

// Bottom Navigation Component
const BottomNavigation = ({ activeTab, onTabChange }) => {
  const tabs = [
    { id: 'arena', label: 'Arena', icon: Home },
    { id: 'profile', label: 'Profile', icon: User },
    { id: 'chat', label: 'Forum', icon: MessageCircle },
    { id: 'settings', label: 'Explore', icon: Settings }
  ];

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-slate-800 border-t border-slate-700 px-4 py-2 z-40">
      <div className="flex justify-around max-w-md mx-auto">
        {tabs.map((tab) => {
          const IconComponent = tab.icon;
          const isActive = activeTab === tab.id;
          
          return (
            <button 
              key={tab.id}
              onClick={() => onTabChange(tab.id)}
              className={`flex flex-col items-center transition-colors ${
                isActive ? 'text-blue-400' : 'text-gray-400 hover:text-blue-300'
              }`}
            >
              <IconComponent className="w-5 h-5" />
              <span className="text-xs">{tab.label}</span>
            </button>
          );
        })}
      </div>
    </div>
  );
};

// Arena View
const ArenaView = ({ user, nemesis }) => {
  const battleStatus = user.stats.streakDays > nemesis.stats.streakDays ? 'WINNING' : 
                     user.stats.streakDays === nemesis.stats.streakDays ? 'TIED' : 'LOSING';
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 py-8 pb-20">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">Battle Arena</h1>
          <div className={`inline-flex items-center px-6 py-3 rounded-full font-bold text-lg shadow-xl ${
            battleStatus === 'WINNING' ? 'bg-green-600' : 
            battleStatus === 'TIED' ? 'bg-yellow-600' : 'bg-red-600'
          } text-white`}>
            <Trophy className="w-5 h-5 mr-2" />
            You are {battleStatus}
          </div>
        </div>
        
        {/* Enhanced Battle Cards */}
        <div className="flex flex-row items-center justify-center gap-12 mb-8 w-full max-w-7xl mx-auto">
          <div className="flex flex-col items-center space-y-4 flex-shrink-0">
            <TradingCard user={user} showComparison={true} nemesisUser={nemesis} />
            <div className="bg-blue-600 px-6 py-3 rounded-full">
              <p className="text-white font-bold text-lg">YOU</p>
            </div>
          </div>
          
          <div className="flex flex-col items-center space-y-4 flex-shrink-0">
            <div className="w-24 h-24 bg-gradient-to-br from-red-500 to-purple-600 rounded-full flex items-center justify-center shadow-xl animate-pulse">
              <Sword className="w-12 h-12 text-white" />
            </div>
            <div className="bg-red-600 px-8 py-3 rounded-full">
              <p className="text-white font-bold text-2xl">VS</p>
            </div>
          </div>
          
          <div className="flex flex-col items-center space-y-4 flex-shrink-0">
            <TradingCard user={nemesis} isNemesis={true} showComparison={true} nemesisUser={user} />
            <div className="bg-red-600 px-6 py-3 rounded-full">
              <p className="text-white font-bold text-lg">NEMESIS</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Affirmation Modal Component
const AffirmationModal = ({ isOpen, onClose }) => {
  const affirmations = [
    "My decisions create positive change in the world",
    "I am stronger than my cravings",
    "Each day smoke-free is a victory",
    "I choose health and happiness over addiction",
    "My willpower grows stronger every day"
  ];

  const todaysAffirmation = affirmations[Math.floor(Date.now() / (1000 * 60 * 60 * 24)) % affirmations.length];

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-slate-800 rounded-2xl p-6 max-w-md w-full shadow-2xl border border-slate-700">
        <div className="text-center">
          <div className="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-2xl">✨</span>
          </div>
          <h3 className="text-xl font-bold text-white mb-2">Today's Affirmation</h3>
          <p className="text-gray-300 text-lg italic mb-6 leading-relaxed">
            "{todaysAffirmation}"
          </p>
          <button
            onClick={onClose}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 rounded-lg transition-all duration-300"
          >
            Thank you
          </button>
        </div>
      </div>
    </div>
  );
};

// Mood Selection Component
const MoodSelector = ({ onMoodSelect, onBack }) => {
  const moods = [
    { id: 'anger', name: 'Anger', emoji: '😡' },
    { id: 'sadness', name: 'Sadness', emoji: '😢' },
    { id: 'disgust', name: 'Disgust', emoji: '🤢' },
    { id: 'fear', name: 'Fear', emoji: '😨' },
    { id: 'enjoyment', name: 'Enjoyment', emoji: '😊' },
    { id: 'calm', name: 'Calm', emoji: '😌' }
  ];

  const handleMoodSelect = (mood) => {
    onMoodSelect(mood);
    setTimeout(() => {
      onBack();
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 p-4 pb-20">
      <div className="max-w-md mx-auto">
        <button 
          onClick={onBack}
          className="text-white mb-6 flex items-center gap-2 hover:text-blue-300 transition-colors"
        >
          ← Back
        </button>
        
        <h1 className="text-3xl font-bold text-yellow-400 mb-8">Today...</h1>
        
        <h2 className="text-white text-lg mb-8">Select your main emotion:</h2>
        
        <div className="grid grid-cols-3 gap-6 mb-12">
          {moods.map((mood) => (
            <button
              key={mood.id}
              onClick={() => handleMoodSelect(mood)}
              className="flex flex-col items-center p-4 rounded-full bg-slate-700/50 hover:bg-slate-600/50 transition-all duration-300 hover:scale-105"
            >
              <div className="w-16 h-16 bg-slate-600 rounded-full flex items-center justify-center text-2xl mb-2">
                {mood.emoji}
              </div>
              <span className="text-white text-sm">{mood.name}</span>
            </button>
          ))}
        </div>
        
        <div className="text-center">
          <button 
            onClick={() => handleMoodSelect({ id: 'indifferent', name: 'Indifferent' })}
            className="text-gray-400 text-sm mb-6"
          >
            I'm feeling indifferent today
          </button>
          
          <button
            onClick={() => handleMoodSelect({ id: 'calm', name: 'Calm' })}
            className="w-full bg-slate-600 hover:bg-slate-500 text-white py-3 rounded-full transition-colors"
          >
            Continue
          </button>
        </div>
      </div>
    </div>
  );
};

// Profile View
const ProfileView = ({ user, onNavigate }) => {
  const [selectedMood, setSelectedMood] = useState(null);
  const [exerciseCompleted, setExerciseCompleted] = useState(false);
  const [hydrationCompleted, setHydrationCompleted] = useState(false);
  const [breathingCompleted, setBreathingCompleted] = useState(false);
  const [showAffirmation, setShowAffirmation] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  const quitDate = new Date(currentTime.getTime() - (2 * 24 + 19) * 60 * 60 * 1000);
  const timeDiff = currentTime - quitDate;
  const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

  const weekDays = [
    { name: 'Mon', color: 'bg-green-500' },
    { name: 'Tue', color: 'bg-green-500' },
    { name: 'Wed', color: 'bg-red-500' },
    { name: 'Thu', color: 'bg-green-500' },
    { name: 'Fri', color: 'bg-slate-700' },
    { name: 'Sat', color: 'bg-slate-700' },
    { name: 'Sun', color: 'bg-slate-700' }
  ];

  const todayTasks = [
    {
      id: 'affirmation',
      title: 'My positive affirmation',
      subtitle: 'Discover your message of the day',
      icon: '📋',
      bgColor: 'from-cyan-500/20 to-cyan-600/20',
      onClick: () => setShowAffirmation(true)
    },
    {
      id: 'mood',
      title: 'Mood tracking',
      subtitle: selectedMood ? `You feel ${selectedMood.name.toLowerCase()}` : 'How do you feel?',
      icon: '🌤️',
      bgColor: 'from-blue-500/20 to-blue-600/20',
      onClick: () => onNavigate('mood-selector')
    },
    {
      id: 'exercise',
      title: 'Exercise for 30 minutes',
      subtitle: exerciseCompleted ? 'Completed! Great job!' : 'Tap to mark as complete',
      icon: '💪',
      bgColor: 'from-green-500/20 to-green-600/20',
      isCheckbox: true,
      completed: exerciseCompleted,
      onClick: () => setExerciseCompleted(!exerciseCompleted)
    },
    {
      id: 'hydration',
      title: 'Stay hydrated',
      subtitle: hydrationCompleted ? 'Completed! Well done!' : 'Tap to mark as complete',
      icon: '💧',
      bgColor: 'from-blue-400/20 to-blue-500/20',
      isCheckbox: true,
      completed: hydrationCompleted,
      onClick: () => setHydrationCompleted(!hydrationCompleted)
    },
    {
      id: 'breathing',
      title: 'Complete breathing exercise',
      subtitle: breathingCompleted ? 'Completed! Stay calm!' : 'Tap to mark as complete',
      icon: '🫁',
      bgColor: 'from-purple-500/20 to-purple-600/20',
      isCheckbox: true,
      completed: breathingCompleted,
      onClick: () => setBreathingCompleted(!breathingCompleted)
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 pb-20">
      {/* Header */}
      <div className="flex items-center justify-between p-4 pt-16">
        <div className="flex items-center gap-3">
          <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
            <span className="text-white font-bold text-lg">D</span>
          </div>
          <div>
            <p className="text-white text-lg">Hello,</p>
            <p className="text-white text-2xl font-bold">Hero</p>
          </div>
        </div>
        <div className="bg-yellow-500 px-3 py-1 rounded-full">
          <span className="font-bold text-slate-900">2</span>
        </div>
      </div>

      <div className="px-4 space-y-6">
        {/* My Week Section */}
        <div className="bg-slate-800/50 rounded-xl p-4">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-white text-xl font-bold">My week</h2>
            <div className="bg-green-500 px-3 py-1 rounded-full flex items-center gap-1">
              <span className="text-white text-sm">✓</span>
              <span className="text-white font-bold">0</span>
            </div>
          </div>
          
          <div className="flex justify-between items-center mb-4">
            {weekDays.map((day, index) => (
              <div key={day.name} className="text-center">
                <div className={`w-8 h-8 rounded-full mb-1 ${day.color}`} />
                <p className="text-gray-400 text-xs">{day.name}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Today Section */}
        <div>
          <h2 className="text-white text-2xl font-bold mb-4">Today</h2>
          <p className="text-gray-400 mb-6">Remaining time: {hours}:{minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}</p>
          
          <div className="space-y-4">
            {todayTasks.map((task, index) => (
              <div key={task.id} className="relative">
                <div className="absolute left-[-20px] top-6 w-4 h-4 bg-slate-600 rounded-full border-2 border-slate-400" />
                {index < todayTasks.length - 1 && (
                  <div className="absolute left-[-14px] top-10 w-1 h-16 bg-slate-600" />
                )}
                
                <button
                  onClick={task.onClick}
                  className={`w-full bg-gradient-to-r ${task.bgColor} bg-slate-800/50 rounded-xl p-4 text-left hover:scale-105 transition-all duration-300`}
                >
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-white rounded-lg flex items-center justify-center text-xl">
                      {task.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-white font-bold text-lg">{task.title}</h3>
                      <p className="text-gray-300 text-sm">{task.subtitle}</p>
                    </div>
                    {task.isCheckbox && (
                      <div className={`w-6 h-6 rounded border-2 flex items-center justify-center ${
                        task.completed ? 'bg-green-500 border-green-500' : 'border-gray-400'
                      }`}>
                        {task.completed && <span className="text-white text-sm">✓</span>}
                      </div>
                    )}
                  </div>
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* My Progress Section */}
        <div>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-white text-2xl font-bold">My progress</h2>
            <button className="text-white">
              <span className="text-xl">↗️</span>
            </button>
          </div>

          {/* Live Time Counter */}
          <div className="bg-slate-800/50 rounded-xl p-4 mb-4">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-yellow-400 text-lg">⏰</span>
              <span className="text-gray-300">Clean for</span>
            </div>
            <div className="flex items-baseline gap-4">
              <div className="text-center">
                <div className="text-white text-3xl font-bold">{days.toString().padStart(2, '0')}</div>
                <div className="text-gray-400 text-sm">days</div>
              </div>
              <div className="text-center">
                <div className="text-white text-3xl font-bold">{hours.toString().padStart(2, '0')}</div>
                <div className="text-gray-400 text-sm">hours</div>
              </div>
              <div className="text-center">
                <div className="text-white text-3xl font-bold">{minutes.toString().padStart(2, '0')}</div>
                <div className="text-gray-400 text-sm">minutes</div>
              </div>
              <div className="text-center">
                <div className="text-white text-2xl font-bold animate-pulse">{seconds.toString().padStart(2, '0')}</div>
                <div className="text-gray-400 text-sm">seconds</div>
              </div>
            </div>
          </div>

          {/* Progress Cards */}
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div className="bg-slate-800/50 rounded-xl p-4">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-yellow-400">$</span>
                <span className="text-gray-300 text-sm">Money (£)</span>
              </div>
              <div className="text-white text-2xl font-bold">17</div>
            </div>
            <div className="bg-slate-800/50 rounded-xl p-4">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-red-400">🚭</span>
                <span className="text-gray-300 text-sm">Cigarettes</span>
              </div>
              <div className="text-white text-2xl font-bold">40</div>
            </div>
          </div>
        </div>
      </div>

      <AffirmationModal 
        isOpen={showAffirmation} 
        onClose={() => setShowAffirmation(false)} 
      />
    </div>
  );
};

// Placeholder Views
const ChatView = () => (
  <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 pb-20 flex items-center justify-center">
    <div className="text-center text-white">
      <MessageCircle className="w-16 h-16 mx-auto mb-4 text-blue-400" />
      <h2 className="text-2xl font-bold mb-2">Forum Coming Soon</h2>
      <p className="text-gray-300">Connect with other quit warriors!</p>
    </div>
  </div>
);

const SettingsView = () => (
  <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 pb-20 flex items-center justify-center">
    <div className="text-center text-white">
      <Settings className="w-16 h-16 mx-auto mb-4 text-blue-400" />
      <h2 className="text-2xl font-bold mb-2">Explore Coming Soon</h2>
      <p className="text-gray-300">Discover new features and settings!</p>
    </div>
  </div>
);

// Main App Component
const QuitCardArenaApp = () => {
  const [activeTab, setActiveTab] = useState('arena');
  const [currentView, setCurrentView] = useState('arena');
  const [selectedMood, setSelectedMood] = useState(null);
  
  // Mock user and nemesis data
  const mockUser = {
    heroName: 'FreedomSeeker Daniil',
    stats: {
      streakDays: 2,
      addictionLevel: 6,
      willpower: 7,
      motivation: 8,
      moneySaved: 17,
      experiencePoints: 50
    },
    achievements: ['WEEK_WARRIOR'],
    archetype: 'MONEY_SAVER',
    avatar: null
  };

  const mockNemesis = {
    heroName: 'HealthGuardian Emma',
    stats: {
      streakDays: 2,
      addictionLevel: 5,
      willpower: 8,
      motivation: 9,
      moneySaved: 17,
      experiencePoints: 60
    },
    achievements: [],
    archetype: 'HEALTH_WARRIOR',
    avatar: null
  };

  const handleTabChange = (tabId) => {
    setActiveTab(tabId);
    setCurrentView(tabId);
  };

  const handleNavigate = (destination) => {
    if (destination === 'mood-selector') {
      setCurrentView('mood-selector');
    } else {
      setCurrentView('profile');
    }
  };

  const handleMoodSelect = (mood) => {
    setSelectedMood(mood);
    setCurrentView('profile');
  };

  const handleBackToProfile = () => {
    setCurrentView('profile');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      {/* Main Content */}
      {currentView === 'arena' && (
        <ArenaView 
          user={mockUser}
          nemesis={mockNemesis}
        />
      )}
      
      {currentView === 'profile' && (
        <ProfileView 
          user={mockUser}
          onNavigate={handleNavigate}
        />
      )}
      
      {currentView === 'mood-selector' && (
        <MoodSelector 
          onMoodSelect={handleMoodSelect}
          onBack={handleBackToProfile}
        />
      )}
      
      {currentView === 'chat' && <ChatView />}
      {currentView === 'settings' && <SettingsView />}

      {/* Bottom Navigation */}
      <BottomNavigation 
        activeTab={activeTab} 
        onTabChange={handleTabChange}
      />
    </div>
  );
};

export default QuitCardArenaApp;
