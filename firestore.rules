rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== HELPER FUNCTIONS =====
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user owns the resource data
    function isResourceOwner() {
      return isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Check if user owns the request data
    function isRequestOwner() {
      return isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // Validate data size (max 1MB per document)
    function isValidSize() {
      return request.resource.size < 1048576; // 1MB limit
    }
    
    // Validate timestamp is not in the future
    function isValidTimestamp(ts) {
      return ts is timestamp && ts <= request.time;
    }
    
    // Validate timestamp field exists (more lenient for behavioral data)
    function hasValidTimestamp(ts) {
      return ts is timestamp;
    }
    
    // Validate string length
    function isValidStringLength(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // Validate array length
    function isValidArrayLength(field, maxLength) {
      return field is list && field.size() <= maxLength;
    }
    
    // Validate numeric range
    function isValidNumericRange(field, min, max) {
      return field is number && field >= min && field <= max;
    }
    
    // Validate email format
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }
    
    // Validate user ID format (Firebase Auth UID)
    function isValidUserId(userId) {
      return userId is string && userId.size() >= 20 && userId.size() <= 128;
    }
    
    // ===== USER DOCUMENTS =====
    
    match /users/{userId} {
      // Users can only access their own documents
      allow read, write: if isOwner(userId);
      
      // Additional validation for writes
      allow create, update: if isOwner(userId) && isValidSize() && validateUserData();
      
      // Validate user document structure
      function validateUserData() {
        let data = request.resource.data;
        
        // Required fields
        return data.keys().hasAll(['uid', 'email', 'createdAt']) &&
               // Validate UID matches document ID
               data.uid == userId &&
               // Validate email format
               isValidEmail(data.email) &&
               // Validate timestamp
               isValidTimestamp(data.createdAt) &&
               // Validate optional fields if present
               (!('displayName' in data) || isValidStringLength(data.displayName, 100)) &&
               (!('photoURL' in data) || isValidStringLength(data.photoURL, 500)) &&
               // Validate stats if present
               (!('stats' in data) || validateStats(data.stats)) &&
               // Validate profile data if present
               (!('profile' in data) || validateProfile(data.profile));
      }
      
      // Validate stats object
      function validateStats(stats) {
        return stats is map &&
               (!('mentalStrength' in stats) || isValidNumericRange(stats.mentalStrength, 0, 100)) &&
               (!('motivation' in stats) || isValidNumericRange(stats.motivation, 0, 100)) &&
               (!('addictionLevel' in stats) || isValidNumericRange(stats.addictionLevel, 0, 100)) &&
               (!('triggerDefense' in stats) || isValidNumericRange(stats.triggerDefense, 0, 100)) &&
               (!('streakDays' in stats) || isValidNumericRange(stats.streakDays, 0, 3650)) && // Max 10 years
               (!('experiencePoints' in stats) || isValidNumericRange(stats.experiencePoints, 0, 1000000));
      }
      
      // Validate profile object
      function validateProfile(profile) {
        return profile is map &&
               (!('heroName' in profile) || isValidStringLength(profile.heroName, 50)) &&
               (!('archetype' in profile) || isValidStringLength(profile.archetype, 50)) &&
               (!('triggers' in profile) || isValidArrayLength(profile.triggers, 20)) &&
               (!('copingStrategies' in profile) || isValidArrayLength(profile.copingStrategies, 20)) &&
               (!('dailyPatterns' in profile) || isValidArrayLength(profile.dailyPatterns, 10));
      }
    }
    
    // ===== BUDDY MATCHING SYSTEM =====
    
    match /matchingPool/{userId} {
      // Users can only access their own matching pool entry
      allow read, write: if isOwner(userId);
      
      // Additional validation for writes
      allow create, update: if isOwner(userId) && isValidSize() && validateMatchingPoolData();
      
      function validateMatchingPoolData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'createdAt', 'status']) &&
               data.userId == userId &&
               isValidUserId(data.userId) &&
               isValidTimestamp(data.createdAt) &&
               data.status in ['waiting', 'matched', 'inactive'] &&
               (!('lastActive' in data) || isValidTimestamp(data.lastActive)) &&
               (!('preferences' in data) || validatePreferences(data.preferences));
      }
      
      function validatePreferences(prefs) {
        return prefs is map &&
               (!('ageRange' in prefs) || isValidNumericRange(prefs.ageRange.min, 18, 100)) &&
               (!('ageRange' in prefs) || isValidNumericRange(prefs.ageRange.max, 18, 100)) &&
               (!('timezone' in prefs) || isValidStringLength(prefs.timezone, 50)) &&
               (!('interests' in prefs) || isValidArrayLength(prefs.interests, 10));
      }
    }
    
    match /buddyPairs/{pairId} {
      // Users can only access buddy pairs they are part of
      allow read: if isAuthenticated() && 
                     (resource.data.user1Id == request.auth.uid || 
                      resource.data.user2Id == request.auth.uid);
      
      // Only allow creation by authenticated users
      allow create: if isAuthenticated() && isValidSize() && validateBuddyPairData();
      
      // Only allow updates by users in the pair
      allow update: if isAuthenticated() && 
                       (resource.data.user1Id == request.auth.uid || 
                        resource.data.user2Id == request.auth.uid) &&
                       isValidSize() && validateBuddyPairUpdate();
      
      // Only allow deletion by users in the pair
      allow delete: if isAuthenticated() && 
                       (resource.data.user1Id == request.auth.uid || 
                        resource.data.user2Id == request.auth.uid);
      
      function validateBuddyPairData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['user1Id', 'user2Id', 'createdAt', 'status']) &&
               isValidUserId(data.user1Id) &&
               isValidUserId(data.user2Id) &&
               data.user1Id != data.user2Id && // Users can't pair with themselves
               (data.user1Id == request.auth.uid || data.user2Id == request.auth.uid) && // User must be in the pair
               isValidTimestamp(data.createdAt) &&
               data.status in ['active', 'inactive', 'blocked'] &&
               (!('lastInteraction' in data) || isValidTimestamp(data.lastInteraction));
      }
      
      function validateBuddyPairUpdate() {
        let data = request.resource.data;
        
        // Don't allow changing user IDs
        return data.user1Id == resource.data.user1Id &&
               data.user2Id == resource.data.user2Id &&
               data.status in ['active', 'inactive', 'blocked'] &&
               (!('lastInteraction' in data) || isValidTimestamp(data.lastInteraction));
      }
    }
    
    // ===== BEHAVIORAL DATA COLLECTIONS =====
    
    // Cravings data
    match /behavioral_cravings/{document} {
      allow read: if isResourceOwner() && isValidSize();
      allow write: if isRequestOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize();
      
      function validateCravingData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp', 'outcome']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               hasValidTimestamp(data.timestamp) &&
               data.outcome in ['resisted', 'relapsed'] &&
               (!('strength' in data) || isValidNumericRange(data.strength, 0, 10)) &&
               (!('duration' in data) || isValidNumericRange(data.duration, 0, 1440)) && // Max 24 hours
               (!('context' in data) || isValidStringLength(data.context, 100)) &&
               (!('triggers' in data) || isValidArrayLength(data.triggers, 20)) &&
               (!('mood' in data) || isValidStringLength(data.mood, 50)) &&
               (!('stressLevel' in data) || isValidNumericRange(data.stressLevel, 0, 10)) &&
               (!('copingStrategiesUsed' in data) || isValidArrayLength(data.copingStrategiesUsed, 10)) &&
               (!('timeOfDay' in data) || isValidNumericRange(data.timeOfDay, 0, 23)) &&
               (!('dayOfWeek' in data) || isValidNumericRange(data.dayOfWeek, 0, 6));
      }
    }
    
    // Relapses data
    match /behavioral_relapses/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateRelapseData();
      
      function validateRelapseData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('escalationLevel' in data) || isValidNumericRange(data.escalationLevel, 0, 10)) &&
               (!('triggers' in data) || isValidArrayLength(data.triggers, 20)) &&
               (!('mood' in data) || isValidStringLength(data.mood, 50)) &&
               (!('context' in data) || isValidStringLength(data.context, 100)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 1000));
      }
    }
    
    // Hydration data
    match /behavioral_hydration/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateHydrationData();
      
      function validateHydrationData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('amount' in data) || isValidNumericRange(data.amount, 0, 10000)) && // Max 10L
               (!('unit' in data) || data.unit in ['ml', 'oz', 'cups']) &&
               (!('type' in data) || isValidStringLength(data.type, 50)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 500));
      }
    }
    
    // Breathing exercises data
    match /behavioral_breathing/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateBreathingData();
      
      function validateBreathingData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('duration' in data) || isValidNumericRange(data.duration, 1, 120)) && // 1-120 minutes
               (!('type' in data) || isValidStringLength(data.type, 50)) &&
               (!('rate' in data) || isValidNumericRange(data.rate, 1, 60)) && // 1-60 breaths per minute
               (!('effectiveness' in data) || isValidNumericRange(data.effectiveness, 1, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 500));
      }
    }
    
    // Meditation data
    match /behavioral_meditation/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateMeditationData();
      
      function validateMeditationData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('duration' in data) || isValidNumericRange(data.duration, 1, 180)) && // 1-180 minutes
               (!('type' in data) || isValidStringLength(data.type, 50)) &&
               (!('effectiveness' in data) || isValidNumericRange(data.effectiveness, 1, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 500));
      }
    }
    
    // Physical activity data
    match /behavioral_physical_activity/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validatePhysicalActivityData();
      
      function validatePhysicalActivityData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('duration' in data) || isValidNumericRange(data.duration, 1, 480)) && // 1-480 minutes
               (!('type' in data) || isValidStringLength(data.type, 50)) &&
               (!('intensity' in data) || isValidNumericRange(data.intensity, 1, 10)) &&
               (!('calories' in data) || isValidNumericRange(data.calories, 0, 5000)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 500));
      }
    }
    
    // Mood tracking data
    match /behavioral_mood/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateMoodData();
      
      function validateMoodData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('mood' in data) || isValidNumericRange(data.mood, 1, 10)) &&
               (!('energy' in data) || isValidNumericRange(data.energy, 1, 10)) &&
               (!('stress' in data) || isValidNumericRange(data.stress, 1, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 1000));
      }
    }
    
    // Stress levels data
    match /behavioral_stress/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateStressData();
      
      function validateStressData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('level' in data) || isValidNumericRange(data.level, 1, 10)) &&
               (!('triggers' in data) || isValidArrayLength(data.triggers, 20)) &&
               (!('copingStrategies' in data) || isValidArrayLength(data.copingStrategies, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 1000));
      }
    }
    
    // Sleep tracking data
    match /behavioral_sleep/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateSleepData();
      
      function validateSleepData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('duration' in data) || isValidNumericRange(data.duration, 1, 16)) && // 1-16 hours
               (!('quality' in data) || isValidNumericRange(data.quality, 1, 10)) &&
               (!('bedtime' in data) || isValidStringLength(data.bedtime, 10)) &&
               (!('wakeTime' in data) || isValidStringLength(data.wakeTime, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 500));
      }
    }
    
    // Social triggers data
    match /behavioral_social_triggers/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateSocialTriggersData();
      
      function validateSocialTriggersData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('triggers' in data) || isValidArrayLength(data.triggers, 20)) &&
               (!('context' in data) || isValidStringLength(data.context, 100)) &&
               (!('impact' in data) || isValidNumericRange(data.impact, 1, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 1000));
      }
    }
    
    // Environmental factors data
    match /behavioral_environmental/{document} {
      allow read, write: if isResourceOwner() && isValidSize();
      allow create: if isRequestOwner() && isValidSize() && validateEnvironmentalData();
      
      function validateEnvironmentalData() {
        let data = request.resource.data;
        
        return data.keys().hasAll(['userId', 'timestamp']) &&
               isValidUserId(data.userId) &&
               data.userId == request.auth.uid &&
               isValidTimestamp(data.timestamp) &&
               (!('factors' in data) || isValidArrayLength(data.factors, 20)) &&
               (!('location' in data) || isValidStringLength(data.location, 100)) &&
               (!('weather' in data) || isValidStringLength(data.weather, 50)) &&
               (!('noiseLevel' in data) || isValidNumericRange(data.noiseLevel, 1, 10)) &&
               (!('notes' in data) || isValidStringLength(data.notes, 1000));
      }
    }
    
    // ===== RATE LIMITING =====
    
    // Rate limiting for behavioral data (max 100 writes per hour per user)
    match /rate_limits/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // ===== DENY ALL OTHER ACCESS =====
    
    // Deny access to all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}