import{dc as c}from"./index-d860e3a1.js";class u{constructor(){this.isOnline=navigator.onLine,this.syncQueue=[],this.offlineData={},this.lastSyncTime=null,this.initOfflineStorage(),this.setupNetworkListeners(),this.loadOfflineData()}initOfflineStorage(){window.indexedDB?(this.storageType="indexedDB",this.initIndexedDB()):(this.storageType="localStorage",console.log("IndexedDB not available, using localStorage for offline storage"))}initIndexedDB(){const e=indexedDB.open("QuitCoachOffline",1);e.onerror=()=>{console.warn("IndexedDB failed, falling back to localStorage"),this.storageType="localStorage"},e.onsuccess=t=>{this.db=t.target.result,console.log("IndexedDB initialized for offline storage")},e.onupgradeneeded=t=>{const n=t.target.result;n.objectStoreNames.contains("userData")||n.createObjectStore("userData",{keyPath:"id"}),n.objectStoreNames.contains("offlineActions")||n.createObjectStore("offlineActions",{keyPath:"timestamp"}),n.objectStoreNames.contains("syncQueue")||n.createObjectStore("syncQueue",{keyPath:"id"})}}setupNetworkListeners(){window.addEventListener("online",()=>{console.log("üåê Network connection restored"),this.isOnline=!0,this.handleReconnection()}),window.addEventListener("offline",()=>{console.log("üì° Network connection lost"),this.isOnline=!1,this.updateOfflineStatus()}),document.addEventListener("visibilitychange",()=>{!document.hidden&&this.isOnline&&this.checkForPendingSync()})}async storeData(e,t){try{this.storageType==="indexedDB"&&this.db?await this.db.transaction(["userData"],"readwrite").objectStore("userData").put({id:e,data:t,timestamp:Date.now()}):localStorage.setItem(`offline_${e}`,JSON.stringify({data:t,timestamp:Date.now()})),console.log(`‚úÖ Data stored offline: ${e}`)}catch(n){console.error("Error storing offline data:",n)}}async getData(e){try{if(this.storageType==="indexedDB"&&this.db){const i=this.db.transaction(["userData"],"readonly").objectStore("userData").get(e);return new Promise((o,a)=>{i.onsuccess=()=>{var s;o(((s=i.result)==null?void 0:s.data)||null)},i.onerror=()=>a(i.error)})}else{const t=localStorage.getItem(`offline_${e}`);return t?JSON.parse(t).data:null}}catch(t){return console.error("Error retrieving offline data:",t),null}}async removeData(e){try{this.storageType==="indexedDB"&&this.db?await this.db.transaction(["userData"],"readwrite").objectStore("userData").delete(e):localStorage.removeItem(`offline_${e}`)}catch(t){console.error("Error removing offline data:",t)}}async queueOfflineAction(e){const t={id:`action_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,action:e,timestamp:Date.now(),retryCount:0,maxRetries:3};try{if(this.storageType==="indexedDB"&&this.db)await this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue").add(t);else{const n=JSON.parse(localStorage.getItem("offline_syncQueue")||"[]");n.push(t),localStorage.setItem("offline_syncQueue",JSON.stringify(n))}return this.syncQueue.push(t),console.log(`üìù Action queued for sync: ${e.type}`),this.showOfflineIndicator(),t.id}catch(n){return console.error("Error queuing offline action:",n),null}}async getQueuedActions(){try{if(this.storageType==="indexedDB"&&this.db){const n=this.db.transaction(["syncQueue"],"readonly").objectStore("syncQueue").getAll();return new Promise((i,o)=>{n.onsuccess=()=>{i(n.result||[])},n.onerror=()=>o(n.error)})}else return JSON.parse(localStorage.getItem("offline_syncQueue")||"[]")}catch(e){return console.error("Error getting queued actions:",e),[]}}async getQueuedActionsCount(){try{return(await this.getQueuedActions()).length}catch(e){return console.error("Error getting queued actions count:",e),0}}async removeQueuedAction(e){try{if(this.storageType==="indexedDB"&&this.db)await this.db.transaction(["syncQueue"],"readwrite").objectStore("syncQueue").delete(e);else{const n=JSON.parse(localStorage.getItem("offline_syncQueue")||"[]").filter(i=>i.id!==e);localStorage.setItem("offline_syncQueue",JSON.stringify(n))}this.syncQueue=this.syncQueue.filter(t=>t.id!==e)}catch(t){console.error("Error removing queued action:",t)}}async cacheUserData(e){if(!e)return;const t={profile:{uid:e.uid,heroName:e.heroName,archetype:e.archetype,avatar:e.avatar,quitDate:e.quitDate,onboardingCompleted:e.onboardingCompleted},stats:e.stats||{},lastUpdated:Date.now()};await this.storeData("userData",t),this.offlineData.userData=t}async cacheProfileData(e){if(!e)return;const t={dailyWater:e.dailyWater||0,dailyMood:e.dailyMood||null,dailyBreathing:e.dailyBreathing||!1,scheduledTriggers:e.scheduledTriggers||[],relapseDate:e.relapseDate||null,cravingsResisted:e.cravingsResisted||0,lastUpdated:Date.now()};await this.storeData("profileData",t),this.offlineData.profileData=t}async getCachedUserData(){return this.offlineData.userData||(this.offlineData.userData=await this.getData("userData")),this.offlineData.userData}async getCachedProfileData(){return this.offlineData.profileData||(this.offlineData.profileData=await this.getData("profileData")),this.offlineData.profileData}async handleOfflineAction(e){return this.isOnline?await this.executeAction(e):await this.queueOfflineAction(e)}async handleOfflineBehavioralLog(e,t){const n={type:"BEHAVIORAL_LOG",logType:e,logData:t,timestamp:Date.now(),userId:t.userId||"unknown"};if(this.isOnline)return await this.executeBehavioralLog(n);{const i=await this.queueOfflineAction(n);return this.showOfflineSaveNotification(e),i}}async executeBehavioralLog(e){try{return"serviceWorker"in navigator&&navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({type:"QUEUE_BEHAVIORAL_LOG",data:e}),console.log(`‚úÖ Behavioral log executed: ${e.logType}`),!0}catch(t){return console.error("Error executing behavioral log:",t),await this.queueOfflineAction(e),!1}}async handleOfflineFirestoreAction(e,t){const n={type:"FIRESTORE_ACTION",actionType:e,actionData:t,timestamp:Date.now(),userId:t.userId||"unknown"};if(this.isOnline)return await this.executeFirestoreAction(n);{const i=await this.queueOfflineAction(n);return this.showOfflineSaveNotification(e),i}}async executeFirestoreAction(e){try{return"serviceWorker"in navigator&&navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({type:"QUEUE_FIRESTORE_ACTION",data:e}),console.log(`‚úÖ Firestore action executed: ${e.actionType}`),!0}catch(t){return console.error("Error executing Firestore action:",t),await this.queueOfflineAction(e),!1}}async executeAction(e){try{const{ref:t,set:n,push:i}=await c(()=>import("./index.esm-9deb0526.js"),["assets/index.esm-9deb0526.js","assets/index-d860e3a1.js","assets/index-54a68fed.css"]);switch(e.type){case"UPDATE_STATS":const o=t(window.db,`users/${e.userId}/stats`);await n(o,e.data);break;case"UPDATE_PROFILE":const a=t(window.db,`users/${e.userId}/profile`);await n(a,e.data);break;case"TRACK_HABIT":const s=t(window.db,`users/${e.userId}/profile/daily/${e.date}/${e.habitType}`);await n(s,e.value);break;case"RESIST_CRAVING":const r=t(window.db,`users/${e.userId}/profile/cravingsResisted`);await n(r,e.count);break;default:return console.warn("Unknown action type:",e.type),!1}return console.log(`‚úÖ Action executed successfully: ${e.type}`),!0}catch(t){return console.error("Error executing action:",t),!1}}async handleReconnection(){console.log("üîÑ Handling reconnection..."),this.hideOfflineIndicator(),setTimeout(async()=>{await this.syncOfflineActions(),await this.refreshOnlineData()},2e3)}async syncOfflineActions(){console.log("üîÑ Syncing offline actions...");const e=await this.getQueuedActions();if(e.length===0){console.log("‚úÖ No offline actions to sync");return}let t=0,n=0;for(const i of e)try{await this.executeAction(i.action)?(await this.removeQueuedAction(i.id),t++):(i.retryCount++,i.retryCount>=i.maxRetries&&(console.warn(`Action failed after ${i.maxRetries} retries:`,i),await this.removeQueuedAction(i.id),n++))}catch(o){console.error("Error syncing action:",o),i.retryCount++,i.retryCount>=i.maxRetries&&(await this.removeQueuedAction(i.id),n++)}console.log(`üîÑ Sync complete: ${t} successful, ${n} failed`),t>0&&this.showSyncSuccessNotification(t),n>0&&this.showSyncFailureNotification(n)}async refreshOnlineData(){console.log("üîÑ Refreshing online data...");try{window.refreshUserData&&await window.refreshUserData()}catch(e){console.error("Error refreshing online data:",e)}}showOfflineIndicator(){this.hideOfflineIndicator();const e=document.createElement("div");e.id="offline-indicator",e.className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-yellow-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 flex items-center gap-2",e.innerHTML=`
      <span>üì°</span>
      <span>You're offline - actions will sync when reconnected</span>
    `,document.body.appendChild(e)}hideOfflineIndicator(){const e=document.getElementById("offline-indicator");e&&e.remove()}showSyncSuccessNotification(e){const t=document.createElement("div");t.className="fixed top-20 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm",t.innerHTML=`
      <div class="font-bold">‚úÖ Sync Complete!</div>
      <div class="text-sm opacity-90">${e} offline action(s) synced successfully</div>
      <button class="mt-2 text-sm underline" onclick="this.parentElement.remove()">Dismiss</button>
    `,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},5e3)}showSyncFailureNotification(e){const t=document.createElement("div");t.className="fixed top-20 right-4 bg-red-500 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm",t.innerHTML=`
      <div class="font-bold">‚ö†Ô∏è Sync Issues</div>
      <div class="text-sm opacity-90">${e} action(s) failed to sync. Check your connection.</div>
      <button class="mt-2 text-sm underline" onclick="this.parentElement.remove()">Dismiss</button>
    `,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},8e3)}showOfflineSaveNotification(e){const n={hydration:"üíß Water intake",craving:"ü´Å Craving resistance",relapse:"‚ö†Ô∏è Relapse event",breathing:"üßò Breathing exercise",walk:"üö∂ Physical activity",meditation:"üßò‚Äç‚ôÄÔ∏è Meditation",FIRESTORE_ACTION:"üìä Data sync",BEHAVIORAL_LOG:"üìà Analytics"}[e]||e,i=document.createElement("div");i.className="fixed top-20 right-4 bg-blue-500 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm",i.innerHTML=`
      <div class="font-bold">üíæ Saved Offline</div>
      <div class="text-sm opacity-90">${n} will sync when you're back online</div>
      <button class="mt-2 text-sm underline" onclick="this.parentElement.remove()">Dismiss</button>
    `,document.body.appendChild(i),setTimeout(()=>{i.parentNode&&i.parentNode.removeChild(i)},4e3)}updateOfflineStatus(){this.isOnline||this.showOfflineIndicator()}async loadOfflineData(){this.offlineData.userData=await this.getData("userData"),this.offlineData.profileData=await this.getData("profileData"),this.syncQueue=await this.getQueuedActions(),console.log("üì± Offline data loaded:",{userData:!!this.offlineData.userData,profileData:!!this.offlineData.profileData,queuedActions:this.syncQueue.length})}async checkForPendingSync(){this.isOnline&&this.syncQueue.length>0&&(console.log("üîÑ Checking for pending sync..."),await this.syncOfflineActions())}getConnectionStatus(){return{isOnline:this.isOnline,queuedActions:this.syncQueue.length,lastSync:this.lastSyncTime}}async clearOfflineData(){try{if(this.storageType==="indexedDB"&&this.db){const e=this.db.transaction(["userData","offlineActions","syncQueue"],"readwrite");await Promise.all([e.objectStore("userData").clear(),e.objectStore("offlineActions").clear(),e.objectStore("syncQueue").clear()])}else Object.keys(localStorage).forEach(e=>{e.startsWith("offline_")&&localStorage.removeItem(e)});this.offlineData={},this.syncQueue=[],console.log("üßπ Offline data cleared")}catch(e){console.error("Error clearing offline data:",e)}}}export{u as default};
