const i={QUIT_DATE:{PERFECT:50,GOOD:35,ACCEPTABLE:20},ADDICTION_LEVEL:30,TIMEZONE:20,EXPERIENCE:15,SHARED_TRIGGERS:5,DAILY_PATTERNS:10,COPING_STRATEGIES:8},s=60,l=(t,e)=>{var r,o;try{let n=0;const a=f(t.quitDate,e.quitDate);n+=a;const c=h((r=t.stats)==null?void 0:r.addictionLevel,(o=e.stats)==null?void 0:o.addictionLevel);n+=c;const d=I(t.timezone,e.timezone);n+=d;const u=T(t.copingStrategies,e.copingStrategies);n+=u;const g=m(t.triggers,e.triggers);n+=g;const E=y(t.dailyPatterns,e.dailyPatterns);n+=E;const S=N(t.copingStrategies,e.copingStrategies);return n+=S,Math.min(100,Math.round(n))}catch(n){return console.error("Error calculating compatibility:",n),0}},f=(t,e)=>{if(!t||!e)return 0;const r=new Date(t),o=new Date(e),n=Math.abs(r.getTime()-o.getTime())/(1e3*3600*24);return n===0?i.QUIT_DATE.PERFECT:n<=3?i.QUIT_DATE.GOOD:n<=7?i.QUIT_DATE.ACCEPTABLE:0},h=(t,e)=>{if(t===void 0||e===void 0)return 0;const r=Math.abs(t-e);return r<=5?i.ADDICTION_LEVEL:r<=10?Math.round(i.ADDICTION_LEVEL*.8):r<=20?Math.round(i.ADDICTION_LEVEL*.6):r<=30?Math.round(i.ADDICTION_LEVEL*.4):0},I=(t,e)=>{if(!t||!e)return 0;if(t===e)return i.TIMEZONE;const r=parseInt(t.replace("UTC",""))||0,o=parseInt(e.replace("UTC",""))||0,n=Math.abs(r-o);return n<=1?Math.round(i.TIMEZONE*.8):n<=2?Math.round(i.TIMEZONE*.6):n<=3?Math.round(i.TIMEZONE*.4):0},T=(t,e)=>{if(!t||!e)return 0;const r=t.includes("Nothing - this is new to me"),o=e.includes("Nothing - this is new to me");return r===o?i.EXPERIENCE:r||o?Math.round(i.EXPERIENCE*.5):0},m=(t,e)=>!t||!e?0:t.filter(o=>e.includes(o)).length*i.SHARED_TRIGGERS,y=(t,e)=>{if(!t||!e)return 0;const r=t.filter(o=>e.includes(o));return r.length>=2?i.DAILY_PATTERNS:r.length===1?Math.round(i.DAILY_PATTERNS*.5):0},N=(t,e)=>{if(!t||!e)return 0;const r=t.filter(o=>e.includes(o));return r.length>=2?i.COPING_STRATEGIES:r.length===1?Math.round(i.COPING_STRATEGIES*.5):0},p=(t,e)=>{try{if(!e||e.length===0)return console.log("No available users in pool"),null;const r=e.filter(a=>a.id!==t.id&&!a.hasActiveBuddy);if(r.length===0)return console.log("No truly available users found"),null;const o=r.map(a=>({user:a,score:l(t,a)}));o.sort((a,c)=>c.score-a.score),console.log("Compatibility scores:",o.map(a=>`${a.user.heroName}: ${a.score}`));const n=o[0];return n.score>=s?(console.log(`Best match found: ${n.user.heroName} with score ${n.score}`),n.user):(console.log(`No matches meet threshold. Best score: ${n.score} (need ${s})`),null)}catch(r){return console.error("Error finding buddy match:",r),null}},O=(t,e)=>{try{const r=l(t,e),o={id:`buddy_${Date.now()}`,user1:{id:t.id,heroName:t.heroName,avatar:t.avatar},user2:{id:e.id,heroName:e.heroName,avatar:e.avatar},compatibilityScore:r,matchDate:new Date().toISOString(),status:"active",lastActivity:new Date().toISOString()};return console.log(`Buddy pair created: ${t.heroName} + ${e.heroName} (Score: ${r})`),o}catch(r){return console.error("Error creating buddy pair:",r),null}},P=t=>{try{const e="buddyWaitingPool";let r=JSON.parse(localStorage.getItem(e)||"[]");const o=r.findIndex(n=>n.id===t.id);return o>=0?r[o]={...t,addedToPool:new Date().toISOString(),lastAttempt:new Date().toISOString()}:r.push({...t,addedToPool:new Date().toISOString(),lastAttempt:new Date().toISOString()}),localStorage.setItem(e,JSON.stringify(r)),console.log(`User ${t.heroName} added to waiting pool`),!0}catch(e){return console.error("Error adding user to waiting pool:",e),!1}},A=()=>{try{const t="buddyWaitingPool";return JSON.parse(localStorage.getItem(t)||"[]")}catch(t){return console.error("Error getting waiting pool:",t),[]}},C=t=>{try{const e="buddyWaitingPool";let r=JSON.parse(localStorage.getItem(e)||"[]");return r=r.filter(o=>o.id!==t),localStorage.setItem(e,JSON.stringify(r)),console.log(`User ${t} removed from waiting pool`),!0}catch(e){return console.error("Error removing user from waiting pool:",e),!1}},D=()=>{try{const t="activeBuddyPairs";return JSON.parse(localStorage.getItem(t)||"[]")}catch(t){return console.error("Error getting active buddy pairs:",t),[]}},M=t=>{try{const e="activeBuddyPairs";let r=JSON.parse(localStorage.getItem(e)||"[]");const o=r.findIndex(n=>n.user1.id===t.user1.id&&n.user2.id===t.user2.id||n.user1.id===t.user2.id&&n.user2.id===t.user1.id);return o>=0?r[o]=t:r.push(t),localStorage.setItem(e,JSON.stringify(r)),console.log(`Buddy pair saved: ${t.user1.heroName} + ${t.user2.heroName}`),!0}catch(e){return console.error("Error saving buddy pair:",e),!1}},v=t=>{try{const r=D().find(o=>o.status==="active"&&(o.user1.id===t||o.user2.id===t));return r?{buddy:r.user1.id===t?r.user2:r.user1,pair:r}:null}catch(e){return console.error("Error getting user active buddy:",e),null}};export{s as MIN_COMPATIBILITY_THRESHOLD,i as SCORING_WEIGHTS,P as addToWaitingPool,l as calculateCompatibility,O as createBuddyPair,p as findBuddyMatch,D as getActiveBuddyPairs,v as getUserActiveBuddy,A as getWaitingPool,C as removeFromWaitingPool,M as saveBuddyPair};
